{"version":3,"sources":["api/book-search/book-search.controller.js"],"names":["show","books","require","maxResults","maxDescr","getBooks","bookToSearch","console","log","options","limit","resolve","reject","search","err","res","bookResult","i","length","hasOwnProperty","shortDescr","description","substr","push","title","authors","publishedDate","descriptionFull","categories","averageRating","thumbnail","allowAdd","req","params","id","then","respondWithResult","catch","handleError","statusCode","entity","status","json","send"],"mappings":"AAAA;;;;;AAKA;;;;;;;;;;QAgDgBA,I,GAAAA,I;;;;AA9ChB,IAAIC,QAAQC,QAAQ,qBAAR,CAAZ;AACA,IAAMC,aAAa,EAAnB;AACA,IAAMC,WAAW,GAAjB;;AAEA;AACA,SAASC,QAAT,CAAkBC,YAAlB,EAA+B;AAC7BC,UAAQC,GAAR,CAAY,oCAAkCF,YAA9C;AACA,MAAIG,UAAU,EAACC,OAAOP,UAAR,EAAd;;AAEA,SAAO,sBAAY,UAACQ,OAAD,EAAUC,MAAV,EAAqB;AACtCX,UAAMY,MAAN,CAAaP,YAAb,EAA2BG,OAA3B,EAAoC,UAASK,GAAT,EAAcC,GAAd,EAAmB;AACrD,UAAID,GAAJ,EAAS,OAAOF,OAAO,8BAAP,CAAP;;AAET;AACA,UAAII,aAAa,EAAjB;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAGF,IAAIG,MAAvB,EAA+BD,GAA/B,EAAmC;;AAEjC;AACA,YAAIF,IAAIE,CAAJ,EAAOE,cAAP,CAAsB,aAAtB,CAAJ,EAAyC;;AAEvC,cAAIC,aAAa,EAAjB;AACA,cAAIL,IAAIE,CAAJ,EAAOI,WAAP,CAAmBH,MAAnB,GAA4Bd,QAAhC,EACEgB,aAAaL,IAAIE,CAAJ,EAAOI,WAAP,CAAmBC,MAAnB,CAA0B,CAA1B,EAA6BlB,QAA7B,IAAwC,KAArD,CADF,KAGEgB,aAAaL,IAAIE,CAAJ,EAAOI,WAApB;;AAEFL,qBAAWO,IAAX,CAAgB;AACdC,mBAAOT,IAAIE,CAAJ,EAAOO,KADA;AAEdC,qBAASV,IAAIE,CAAJ,EAAOQ,OAFF;AAGdC,2BAAeX,IAAIE,CAAJ,EAAOS,aAHR;AAIdL,yBAAaD,UAJC;AAKdO,6BAAiBZ,IAAIE,CAAJ,EAAOI,WALV;AAMdO,wBAAYb,IAAIE,CAAJ,EAAOW,UANL;AAOdC,2BAAed,IAAIE,CAAJ,EAAOY,aAPR;AAQdC,uBAAWf,IAAIE,CAAJ,EAAOa,SARJ;AASdC,sBAAU,GATI,CASA;;AATA,WAAhB;AAYD;AACF;AACD,aAAOpB,QAAQK,UAAR,CAAP;AACD,KA/BD;AAgCD,GAjCM,CAAP;AAkCD;;AAED;AACO,SAAShB,IAAT,CAAcgC,GAAd,EAAmBjB,GAAnB,EAAwB;AAC7B,SAAOV,SAAS2B,IAAIC,MAAJ,CAAWC,EAApB,EACJC,IADI,CACCC,kBAAkBrB,GAAlB,CADD,EAEJsB,KAFI,CAEEC,YAAYvB,GAAZ,CAFF,CAAP;AAGD;;AAED,SAASqB,iBAAT,CAA2BrB,GAA3B,EAAgCwB,UAAhC,EAA4C;AAC1CA,eAAaA,cAAc,GAA3B;AACA,SAAO,UAASC,MAAT,EAAiB;AACtB,QAAGA,MAAH,EAAW;AACT,aAAOzB,IAAI0B,MAAJ,CAAWF,UAAX,EAAuBG,IAAvB,CAA4BF,MAA5B,CAAP;AACD;AACD,WAAO,IAAP;AACD,GALD;AAMD;;AAED,SAASF,WAAT,CAAqBvB,GAArB,EAA0BwB,UAA1B,EAAsC;AACpCA,eAAaA,cAAc,GAA3B;AACA,SAAO,UAASzB,GAAT,EAAc;AACnBC,QAAI0B,MAAJ,CAAWF,UAAX,EAAuBI,IAAvB,CAA4B7B,GAA5B;AACD,GAFD;AAGD","file":"book-search.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/book-search/:id          ->  show\n */\n\n'use strict';\n\nvar books = require('google-books-search');\nconst maxResults = 10;\nconst maxDescr = 100;\n\n/* Function to retrieve book information from Google API */\nfunction getBooks(bookToSearch){\n  console.log(\"Received request to find book: \"+bookToSearch);\n  var options = {limit: maxResults};\n\n  return new Promise((resolve, reject) => {\n    books.search(bookToSearch, options, function(err, res) {\n      if (err) return reject(\"Could not retrieve book info\");\n\n      // Filter recieved data\n      var bookResult = [];\n      for (var i = 0; i< res.length; i++){\n\n        // Only accept books with description\n        if (res[i].hasOwnProperty('description')){\n\n          var shortDescr = '';\n          if (res[i].description.length > maxDescr)\n            shortDescr = res[i].description.substr(0, maxDescr) +'...';\n          else\n            shortDescr = res[i].description;\n\n          bookResult.push({\n            title: res[i].title,\n            authors: res[i].authors,\n            publishedDate: res[i].publishedDate,\n            description: shortDescr,\n            descriptionFull: res[i].description,\n            categories: res[i].categories,\n            averageRating: res[i].averageRating,\n            thumbnail: res[i].thumbnail,\n            allowAdd: \"1\" // This is for FE.. in PROD it would indicate if user already has book (to be done later)\n          \n          });\n        }\n      }\n      return resolve(bookResult);\n    });\n  });\n}; \n\n// Endpoint to search the google API for user requested books\nexport function show(req, res) {\n  return getBooks(req.params.id)\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if(entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}"]}